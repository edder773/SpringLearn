3.1. 주문 리뷰 작성
ReviewRestController.review 메소드를 구현하세요.

인증된 사용자 본인의 주문에 대해 리뷰를 작성한다.

주문 상태 state가 COMPLETED라면 리뷰를 작성할 수 있다. 단, 동일한 주문에 대해 중복 리뷰를 작성할 수 없다. 정상적으로 리뷰가 작성되면 리뷰 대상 Product의 reviewCount 값이 1 증가한다.

리뷰 작성이 불가능하다면 400 오류를 응답한다.

구분: 인증 사용자용 API
구현 컨트롤러: com.github.prgrms.orders.ReviewRestController
컨트롤러 메소드명: review
URL: POST /api/orders/{id}/review
{id}: 리뷰를 남기려는 주문의 PK
Request Body: 리뷰 내용
{
  "content": "review test"
}
Response Body: 작성된 리뷰 내용
{
  "success": true,
  "response": {
    "seq": 2,
    "productId": 3,
    "content": "review test",
    "createAt": "2021-01-20 20:16:47"
  },
  "error": null
}
중복 리뷰 작성 오류 응답 예시
{
  "success": false,
  "response": null,
  "error": {
    "message": "Could not write review for order 4 because have already written",
    "status": 400
  }
}
주문 상태 state가 COMPLETED가 아닌 경우 오류 응답 예시
{
  "success": false,
  "response": null,
  "error": {
    "message": "Could not write review for order 1 because state(REQUESTED) is not allowed",
    "status": 400
  }
}
3.2. 주문 목록 조회
OrderRestController.findAll 메소드를 구현하세요.

인증된 사용자 본인의 주문 목록을 출력한다.

주문은 Review를 포함할 수 있다. (샘플 데이터에서 seq=4인 주문은 리뷰를 포함한다.)

구분: 인증 사용자용 API
구현 컨트롤러: com.github.prgrms.orders.OrderRestController
컨트롤러 메소드명: findAll
URL: GET /api/orders?offset=0&size=5
offset: offset 기반 페이징 처리 파리미터 (최소값: 0, 최대값: Long.MAX_VALUE, 기본값: 0)
size: 출력할 아이템의 갯수 (최소값 1, 최대값: 5, 기본값: 5)
offset, size 값이 최소값~최대값 범위 밖이거나 주어지지 않는다면 기본값으로 대체
Response Body: 주문 내용 목록 (아래 출력 예시는 offset=0, size=5 인 경우)
offset=2 라면, seq=5인 주문부터 출력되야함
힌트: 페이징 파라미터 (offset, size) 처리를 위해 com.github.prgrms.configures.web.SimplePageRequestHandlerMethodArgumentResolver 클래스 완성이 필요합니다.
RestController에서는 Pageable 타입으로 페이징 파라미터 접근이 가능합니다.

{
  "success": true,
  "response": [
    {
      "seq": 7,
      "productId": 3,
      "review": null,
      "state": "REQUESTED",
      "requestMessage": null,
      "rejectMessage": null,
      "completedAt": null,
      "rejectedAt": null,
      "createAt": "2021-01-20 20:13:36"
    },
    {
      "seq": 6,
      "productId": 3,
      "review": null,
      "state": "REJECTED",
      "requestMessage": null,
      "rejectMessage": "No stock",
      "completedAt": null,
      "rejectedAt": "2021-01-24 18:30:00",
      "createAt": "2021-01-20 20:13:36"
    },
    {
      "seq": 5,
      "productId": 3,
      "review": {
        "seq": 2,
        "productId": 3,
        "content": "review test",
        "createAt": "2021-01-20 20:16:47"
      },
      "state": "COMPLETED",
      "requestMessage": null,
      "rejectMessage": null,
      "completedAt": "2021-01-24 10:30:10",
      "rejectedAt": null,
      "createAt": "2021-01-20 20:13:36"
    },
    {
      "seq": 4,
      "productId": 2,
      "review": {
        "seq": 1,
        "productId": 2,
        "content": "I like it!",
        "createAt": "2021-01-20 20:13:36"
      },
      "state": "COMPLETED",
      "requestMessage": "plz send it quickly!",
      "rejectMessage": null,
      "completedAt": "2021-01-24 12:10:30",
      "rejectedAt": null,
      "createAt": "2021-01-20 20:13:36"
    },
    {
      "seq": 3,
      "productId": 2,
      "review": null,
      "state": "SHIPPING",
      "requestMessage": null,
      "rejectMessage": null,
      "completedAt": null,
      "rejectedAt": null,
      "createAt": "2021-01-20 20:13:36"
    }
  ],
  "error": null
}
3.3. 개별 주문 조회
OrderRestController.findById 메소드를 구현하세요.

인증된 사용자 본인의 개별 주문을 출력한다.

주문은 Review를 포함할 수 있다. (샘플 데이터에서 seq=4인 주문은 리뷰를 포함한다.)

구분: 인증 사용자용 API
구현 컨트롤러: com.github.prgrms.orders.OrderRestController
컨트롤러 메소드명: findById
URL: GET /api/orders/{id}
{id}: 조회 대상 주문의 PK
Response Body: 주문 내용
{
  "success": true,
  "response": {
    "seq": 4,
    "productId": 2,
    "review": {
      "seq": 1,
      "productId": 2,
      "content": "I like it!",
      "createAt": "2021-01-20 20:13:36"
    },
    "state": "COMPLETED",
    "requestMessage": "plz send it quickly!",
    "rejectMessage": null,
    "completedAt": "2021-01-24 12:10:30",
    "rejectedAt": null,
    "createAt": "2021-01-20 20:13:36"
  },
  "error": null
}
3.4. 주문 접수 처리
OrderRestController.accept 메소드를 구현하세요.

인증된 사용자 본인의 주문에 대해 상태를 변경한다.

주문이 최초 생성될 때 주문 상태 state는 REQUESTED이다. 주문 상태가 REQUESTED라면 접수 처리를 할 수 있다. 정상적으로 접수 처리 되면 주문 상태는 ACCEPTED로 변경된다.

상태 변경이 불가능하다면 예외를 발생시키지 말고 false를 정상 반환한다.

구분: 인증 사용자용 API
구현 컨트롤러: com.github.prgrms.orders.OrderRestController
컨트롤러 메소드명: accept
URL: PATCH /api/orders/{id}/accept
{id}: 상태를 변경할 주문의 PK
Response Body: true 라면, 상태변경 성공
{
  "success": true,
  "response": true,
  "error": null
}
주문 상태 state가 REQUESTED가 아닌 경우 응답 예시
{
  "success": true,
  "response": false,
  "error": null
}
3.5. 주문 거절 처리
OrderRestController.reject 메소드를 구현하세요.

인증된 사용자 본인의 주문에 대해 상태를 변경한다.

주문이 최초 생성될 때 주문 상태 state는 REQUESTED이다. 주문 상태가 REQUESTED라면 거절 처리를 할 수 있다. 정상적으로 거절 처리 되면 주문 상태는 REJECTED로 변경된다. 그리고 주문 거절 시각 rejectedAt은 현재 시각으로 설정된다.

상태 변경이 불가능하다면 예외를 발생시키지 말고 false를 정상 반환한다.

구분: 인증 사용자용 API
구현 컨트롤러: com.github.prgrms.orders.OrderRestController
컨트롤러 메소드명: reject
URL: PATCH /api/orders/{id}/reject
{id}: 상태를 변경할 주문의 PK
Request Body: 거절 메세지
{
  "message": "reject message"
}
Response Body: true 라면, 상태변경 성공
{
  "success": true,
  "response": true,
  "error": null
}
주문 상태 state가 REQUESTED가 아닌 경우 응답 예시
{
  "success": true,
  "response": false,
  "error": null
}
3.6. 주문 배송 처리
OrderRestController.shipping 메소드를 구현하세요.

인증된 사용자 본인의 주문에 대해 상태를 변경한다.

주문 상태 state가 ACCEPTED라면 배송 처리를 할 수 있다. 정상적으로 배송 처리 되면 주문 상태는 SHIPPING으로 변경된다.

상태 변경이 불가능하다면 예외를 발생시키지 말고 false를 정상 반환한다.

구분: 인증 사용자용 API
구현 컨트롤러: com.github.prgrms.orders.OrderRestController
컨트롤러 메소드명: shipping
URL: PATCH /api/orders/{id}/shipping
{id}: 상태를 변경할 주문의 PK
Response Body: true 라면, 상태변경 성공
{
  "success": true,
  "response": true,
  "error": null
}
주문 상태 state가 ACCEPTED가 아닌 경우 응답 예시
{
  "success": true,
  "response": false,
  "error": null
}
3.7. 주문 완료 처리
OrderRestController.complete 메소드를 구현하세요.

인증된 사용자 본인의 주문에 대해 상태를 변경한다.

주문 상태 state가 SHIPPING이라면 완료 처리를 할 수 있다. 정상적으로 완료 처리 되면 주문 상태는 COMPLETED로 변경된다. 그리고 주문 완료 시각 completedAt은 현재 시각으로 설정된다.

상태 변경이 불가능하다면 예외를 발생시키지 말고 false를 정상 반환한다.

구분: 인증 사용자용 API
구현 컨트롤러: com.github.prgrms.orders.OrderRestController
컨트롤러 메소드명: complete
URL: PATCH /api/orders/{id}/complete
{id}: 상태를 변경할 주문의 PK
Response Body: true 라면, 상태변경 성공
{
  "success": true,
  "response": true,
  "error": null
}
주문 상태 state가 SHIPPING이 아닌 경우 응답 예시
{
  "success": true,
  "response": false,
  "error": null
}